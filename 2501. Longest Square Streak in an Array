class Solution {
public:
    int longestSquareStreak(vector<int>& nums) {
        int longestStreak = -1,n;
        n = nums.size();
        vector<int> presenceChecker(100001,0);

        // Keeping track of presence of each element of nums array in presenceChecker array.
        for(int i=0;i<n;i++)
            presenceChecker[nums[i]] = 1;

        // Applying our algorithm for each element in nums array.
        for(int i=0;i<n;i++){
            long long int curr = nums[i];
            int currLongestStreak = 1;
            while(true){
                if(curr*curr<100001 && presenceChecker[curr*curr] == 1){
                    currLongestStreak++;
                    curr = curr*curr;
                }
                else
                    break;
            }
            // if there is atleat 1 next square present in the array then currLongestStreak will
            // be always greater than 1.
            if(currLongestStreak != 1)
                longestStreak = max(longestStreak,currLongestStreak);
        }

        return longestStreak;
    }
};
