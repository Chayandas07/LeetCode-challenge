class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        // we are given a perfect binary tree;
        vector<TreeNode*> prev;
        vector<TreeNode*> next;
        queue<TreeNode*> q;
        next.push_back(root);
        q.push(root);
        int lvl = 0;
        while(next.empty() == false) {
            // for(TreeNode* i : prev) cout<<i->val<<" ";
            // cout<<endl;
            // for(TreeNode* i : next) cout<<i->val<<" ";
            // cout<<endl;
            int index = 0;
            if (lvl & 1) 
                reverse(next.begin(),next.end());

            for(TreeNode* i:prev) {
                i->left = next[index];
                i->right = next[index + 1];
                index += 2;
            }

            lvl+=1;
            prev = next;
            vector<TreeNode*> temp;
            int q_size = q.size();
            while(q_size--) {
                TreeNode* front = q.front();
                q.pop();
                if (front -> left != NULL) {
                    temp.push_back(front->left);
                    q.push(front->left);
                }
                if (front -> right != NULL) {
                    temp.push_back(front->right);
                    q.push(front->right);
                }
            }
            next = temp;
        }
        return root;
    }
};
