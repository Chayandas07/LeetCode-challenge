class Solution {
public:
    int maxMoves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<int>> dp(n, vector<int>(m, 0));
        for(int i = 0; i<n;i++) {
            dp[i][m-1] = 1;
        }
        for (int j = m - 2; j >= 0; j--) { 
            for (int i = 0; i < n; i++) {
                int maxMoves = 0;
                if (i - 1 >= 0 && grid[i - 1][j + 1] > grid[i][j]) {
                    maxMoves = max(maxMoves,dp[i - 1][j + 1]);
                }
                if (grid[i][j + 1] > grid[i][j]) {
                    maxMoves = max(maxMoves, dp[i][j + 1]);
                }
                if (i + 1 < n && grid[i + 1][j + 1] > grid[i][j]) {
                    maxMoves = max(maxMoves, dp[i + 1][j + 1]);
                }
                dp[i][j] = 1 +  maxMoves;
            }
        }

        int maxi = 0;
        for (int i = 0; i < n; i++) {
            maxi = max(maxi, dp[i][0]);
        }
        return maxi - 1;
    }
};
