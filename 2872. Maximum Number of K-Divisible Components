class Solution {
public:
    int ans = 0;

    int dfs(int num, int& k, vector<int> &values, vector<vector<int>> &vt, int parent) {

        int total = values[num];

        for (const int &x : vt[num])
            total += x == parent ? 0 : dfs(x, k, values, vt, num);

        total %= k;
        ans += !total;

        return total;
    };
    
    int maxKDivisibleComponents(int n, vector<vector<int>>& edges, vector<int>& values, int k) {
        vector<vector<int>> vt(n);
        for (const vector<int>& edge : edges) {
            int f = edge.front(), b = edge.back();
            vt[f].push_back(b);
            vt[b].push_back(f);
        }
        dfs(0, k, values, vt, 0);
        return ans;
    }
};
