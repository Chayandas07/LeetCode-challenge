class Solution {
    vector<pair<int, int>> dirs = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
public:
    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        int n = grid.size(), m = grid[0].size(), k = queries.size();
        vector<pair<int, int>> qi;
        for (int i = 0; i < k; i++){
            qi.push_back(make_pair(queries[i], i));
        }
        sort(qi.begin(), qi.end());
        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<>> pq;
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        pq.push(make_tuple(grid[0][0], 0, 0));
        visited[0][0] = true;
        vector<int> res(k, 0);
        int count = 0;
        for (auto& q : qi){
            int limit = q.first, idx = q.second;
            while (!pq.empty() && get<0>(pq.top()) < limit){
                tuple<int, int, int> cur = pq.top();
                pq.pop();
                int wei = get<0>(cur), row = get<1>(cur), col = get<2>(cur);
                count++;
                for (auto& dir : dirs){
                    int dr = dir.first + row, dc = dir.second + col;
                    if (dr >= 0 && dr < n && dc >= 0 && dc < m && !visited[dr][dc]){
                        visited[dr][dc] = true;
                        pq.push(make_tuple(grid[dr][dc], dr, dc));
                    }
                }
            }
            res[idx] = count;
        }
        return res;
    }
};
