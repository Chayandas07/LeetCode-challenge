class Solution {
public:
    int secondMinimum(int n, vector<vector<int>>& edges, int time, int change) {
        vector<vector<int>>adj(n+1);
        for(auto it : edges) {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        vector<int>mn(n+1,1e9), smn(n+1,1e4);

        queue<pair<int,int>>q;
        mn[1] = 0;
        q.push({1,0});
        while(q.size()){
            int node = q.front().first;
            int wt = q.front().second;
            q.pop();
            for(auto it : adj[node]){
                if(mn[it] > wt+1){
                    mn[it] = wt+1;
                    q.push({it, wt+1});
                }
                
            }
        }
        q.push({1,0});
        while(q.size()){
            int node = q.front().first;
            int wt = q.front().second;
            q.pop();
            for(auto it : adj[node]){
               
                if(wt+1>mn[it] && wt+1<smn[it]){
                    smn[it] = wt+1;
                    q.push({it, wt+1});
                
                }
                else if(wt+1 == mn[it]) q.push({it, wt+1});
                
            }
        }
        int ans = 0;
        while(smn[n]--){
            ans += time;
            cout<<ans<<" ";
            if((ans / change)%2 && smn[n]){
                ans += (change - ans%change);
                cout<<ans<<" , ";
            }
        }
        return ans;
    }
};
