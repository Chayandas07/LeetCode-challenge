/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void f(TreeNode *root,bool &get,string &str,int st){
        if(get){
            str.pop_back();
            return;
        }
        if(!root){
            str.pop_back();
            return;
        }
        if(root->val == st){
            get = true;
            return;
        }
        str+='L';
        f(root->left,get,str,st);
        if(get) return;
        str+='R';
        f(root->right,get,str,st);
        if(get) return;
        str+='U';
        str.pop_back();
        str.pop_back();
    }
    string getDirections(TreeNode* root, int startValue, int destValue) {
        bool get = false;
        string ststr = "",endstr="",ans="";
        f(root,get,ststr,startValue);
        get = false;
        f(root,get,endstr,destValue);
        if(ststr==""){
            return endstr;
        }
        if(endstr==""){
            for(int i=0;i<ststr.size();i++){
                if(ststr[i]=='L' || ststr[i]=='R'){
                    ststr[i]='U';
                }
            }
            return ststr;
        }
        if(ststr[0]==endstr[0]){
            string st,end;
            int i=1;
            while(i<min(ststr.size(),endstr.size())){
                if(ststr[i]==endstr[i]){
                    i++;
                }
                else{
                    break;
                }
            }
            if(i<min(ststr.size(),endstr.size())){
                int j = i,k=i;
                while(i<ststr.size()){
                    ststr[i]='U';
                    i++;
                }
                return ststr.substr(k,ststr.size()) + endstr.substr(j,endstr.size());
            }
            else{
                if(i==ststr.size()){
                    return endstr.substr(i,endstr.size());
                }
                else{
                    int j = i;
                    while(i<ststr.size()){
                        ststr[i] = 'U';
                        i++;
                    }
                    return ststr.substr(j,ststr.size());
                }
            }
        }
        string temp;
        for(int i=0;i<ststr.size();i++){
            temp+='U';
        }
        temp+=endstr;
        return temp;
    }
};
