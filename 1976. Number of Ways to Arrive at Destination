class Solution {
public:
    vector<vector<pair<int,long long>>>graph;

    int countPaths(int n, vector<vector<int>>& roads) {
        
        graph.resize(n);

        for(vector<int>road : roads){
            int u = road[0], v = road[1], time = road[2];
            graph[u].push_back({v,time});
            graph[v].push_back({u,time});
        }

        vector<long long>dist(n, LLONG_MAX);
        vector<int>ways(n, 0);
        priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<>> pq;

        dist[0] = 0;
        ways[0] = 1;
        pq.push({0, 0});

        while(!pq.empty()){
            auto [currTime, node] = pq.top();
            pq.pop();

            if(currTime > dist[node]){
                continue;
            }

            for(auto [nextNode, time] : graph[node]){
                long long newTime = time + currTime;
                if(newTime < dist[nextNode]){
                    dist[nextNode] = newTime;
                    ways[nextNode] = ways[node];
                    pq.push({newTime, nextNode});
                }else if(newTime == dist[nextNode]){
                    ways[nextNode] = (ways[nextNode] + ways[node]) % 1000000007;
                }
            }
        }

        return ways[n - 1];
    }
};
