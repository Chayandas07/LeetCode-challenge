class Solution {
public:
    int solve(vector<vector<vector<int>>> &dp,vector<vector<int>> &grid, int row, int col1,int col2){
        if(row>=grid.size() || row < 0 || col1>= grid[0].size() || col1<0 || col2>= grid[0].size() || col2<0){
            return 0;
        }

        if(dp[row][col1][col2] != -1){
            return dp[row][col1][col2];
        }

        int LL = solve(dp,grid,row+1,col1-1,col2-1);
        int LB = solve(dp,grid,row+1,col1-1,col2);
        int LR = solve(dp,grid,row+1,col1-1,col2+1);

        int BL = solve(dp,grid,row+1,col1,col2-1);
        int BB = solve(dp,grid,row+1,col1,col2);
        int BR = solve(dp,grid,row+1,col1,col2+1);

        int RL = solve(dp,grid,row+1,col1+1,col2-1);
        int RB = solve(dp,grid,row+1,col1+1,col2);
        int RR = solve(dp,grid,row+1,col1+1,col2+1);

        int maxi = max(LL,max(LB,max(LR,max(BL,max(BB,max(BR,max(RL,max(RB,RR))))))));
        if(col1 == col2){
            return dp[row][col1][col2] =( grid[row][col1] + maxi);
        }
        return dp[row][col1][col2] =  (grid[row][col1] + grid[row][col2] + maxi);

    }
    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
        return solve(dp,grid,0,0,grid[0].size()-1);
    }
};
