class Solution {
public:
    int helper(vector<int> &nums, int k){
        int frequency = 0, ans = 0; ; // frequency --> count store krne k liye... && ans --> sum store krne k liye...
        map<int, int> mapping; // ordered map...
        for(int i = 0; i < nums.size(); ++i){
            ans += nums[i]; // addition...
            if(ans == k){
                frequency++; // subarray found...
            }
            if(mapping.find(ans - k) != mapping.end()){ // found in map...
                frequency += mapping[ans - k];
            }
            mapping[ans]++; // otherwise store entry in map...
        }
        return frequency;
    }
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int count = 0;
        for(int i = 0; i < matrix.size(); ++i){
            vector<int> result(matrix[0].size(), 0);
            for(int j = i; j < matrix.size(); ++j){ // for each row...
                for(int k = 0; k < matrix[0].size(); ++k){ // for each column...
                    result[k] += matrix[j][k];
                }
                count += helper(result, target);
            }
        }
        return count;
    }
};
