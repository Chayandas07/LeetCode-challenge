class Solution {
public:
    bool parseBoolExpr(string expression) {
        
        stack<char> st, op;

        for(auto & it: expression){

            if(it == '&' || it == '|' || it == '!'){
                op.push(it);
            }
            else if(it == ')'){

                int f = 0, t = 0;
                while(st.top() != '('){
                    char ch = st.top();
                    if(ch == 'f') f++;
                    if(ch == 't') t++;
                    st.pop();
                }

                st.pop();

                if(op.top() == '&'){
                    if(f == 0) st.push('t');
                    else st.push('f');
                }
                else if(op.top() == '|'){
                    if(t > 0) st.push('t');
                    else st.push('f');
                }
                else{
                    if(f == 0) st.push('f');
                    else st.push('t');
                }
                op.pop();
            }
            else{
                st.push(it);
            }
        }

        return st.top() == 'f' ? false : true;
    }
};
