




class Solution {
public:
    const int MOD = 1e9 + 7;
    vector<int> productQueries(int n, vector<vector<int>>& queries) {
        vector<int> powers;
        for(int i = 0;i<32;i++){
            int mask = 1<<i;
            if(n&mask){
                powers.push_back(mask);
            }
        }
        int m = powers.size();
        vector<int> ans;
        vector<vector<int>> prefixProduct(m,vector<int>(m));
        for(int i = 0;i<m;i++){
            int cur = 1;
            for(int j = i;j<m;j++){
               cur = static_cast<long long>(cur)*powers[j]%MOD;
               prefixProduct[i][j] = cur;
            }
            
        }
        for(auto vec : queries){
            int left = vec[0];
            int right = vec[1];
            ans.push_back(prefixProduct[left][right]);
        }
        return ans;
    }
};




