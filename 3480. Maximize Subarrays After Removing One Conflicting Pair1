class Solution 
{
public:
    int countMaxOrSubsets(vector<int>& nums) 
    {
        // Step 2: Compute the maximum possible OR of all numbers
        int maxOr = 0;
        for (int num : nums) 
        {
            maxOr |= num;
        }

        int count = 0;

        // Step 3: Start the recursive backtracking
        backtrack(nums, 0, 0, maxOr, count);
        
        // Step 6: Return the final result
        return count;
    }

    // Step 3: Recursive function to explore subsets
    void backtrack(vector<int>& nums, int index, int currentOr, int maxOr, int& count) 
    {
        // Step 4: Base case â€“ all numbers considered
        if (index == nums.size()) 
        {
            // Step 4: Check if current OR equals the max OR
            if (currentOr == maxOr) 
            {
                count++;  // Valid subset found
            }
            
            return;
        }

        // Step 5: Recursive calls
        // Include current number
        backtrack(nums, index + 1, currentOr | nums[index], maxOr, count);
        
        // Exclude current number
        backtrack(nums, index + 1, currentOr, maxOr, count);
    }
};
