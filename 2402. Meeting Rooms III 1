class Solution {
  public:
    int mostBooked(int n, vector<vector<int>>& meetings) {
        vector<int> booked(n, 0);
        priority_queue<int, vector<int>, greater<>> idle;
        priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<>> busy;
        for (int i = 0; i < n; ++i) { idle.push(i); }
        ranges::sort(meetings, [](const auto& lhs, const auto& rhs) { return lhs[0] < rhs[0]; });
        for (const auto& m : meetings) {
            int start = m[0], end = m[1];
            while (!busy.empty() && busy.top().first <= start) {
                idle.push(busy.top().second);
                busy.pop();
            }
            if (!idle.empty()) {
                int room = idle.top();
                idle.pop();
                busy.push({end, room});
                ++booked[room];
            } else {
                auto p = busy.top();
                busy.pop();
                p.first += end - start;
                busy.push(p);
                ++booked[p.second];
            }
        }
        int res = -1, cur = -1;
        for (int i = 0; i < n; ++i) {
            if (booked[i] > cur) {
                cur = booked[i];
                res = i;
            }
        }
        return res;
    }
};
