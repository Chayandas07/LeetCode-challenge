class Solution {
public:
    int minimumDeletions(string word, int k) {
        unordered_map <char,int> freq;
        for(auto x:word){
            freq[x]++;
        }
        vector<int> storage;
        for(auto pair: freq){
            storage.push_back(pair.second);
        }
        sort(storage.begin(),storage.end());
        int n=storage.size();
        //now we need to check that how many deletion would be needed to make the freq lie in the range of [reference,reference+k] --> so that difference of freq is at most k.
int min_times=1e5;
        // for each freq considering it as reference and calcualating deletion
        for(int i=0;i<n;i++){
            int ref=storage[i];
            int deletion=0;
            // for freq less than reference, deletion of all the characters 
            for(int j=0;j<i;j++){
                deletion+=storage[j];
            }
            // for freq greater than ref+k we will reduce them exactly to ref+k
            for(int j=i;j<n;j++){
                if(storage[j]>ref+k){
                    deletion+=storage[j]-(ref+k);
                }
            }
            if(deletion<min_times){
                min_times=deletion;
            }
        }
        return min_times;
    }
};
